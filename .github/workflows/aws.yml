name: Deploy app
on:
  push:
    branches:
      - main
env:
  AWS_REGION: eu-west-1
  ECS_CLUSTER: shopgaper_cluster
  CONTAINER_NAME: shopgaper_app
  ECS_TD: .github/workflows/td.json
jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
#      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      github: ${{ steps.filter.outputs.github }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'shopgaper-backend/**'
            frontend:
              - 'shopgaper-frontend/**'
            github:
              - '.github/**'
  deploy_backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.github == 'true' }}
    name: Deploy backend
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: "924802634161.dkr.ecr.eu-west-1.amazonaws.com"
          ECR_REPOSITORY: "shopgaper_repo"
          IMAGE_TAG: latest
          working-directory: ./shopgaper-backend
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        working-directory: ${{env.working-directory}}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-1
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TD }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-1.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  deploy_frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.github == 'true' }}
    name: Deploy frontend
    runs-on: ubuntu-latest
    environment: production
    env:
      working-directory: ./shopgaper-frontend
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION}}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_OUTPUT: json
    steps:
      - uses: actions/checkout@v3
#      - name: Install dependencies
#        working-directory: ${{env.working-directory}}
#        run: npm install
#      - name: Build
#        working-directory: ${{env.working-directory}}
#        run: npm run build
      - name: Install AWS CLI
        run: |
          pip install awscliv2
      - name: Deploy with S3 sync and invalidate CloudFront cache
        working-directory: ${{env.working-directory}}
        run: |
          aws s3 sync ./build s3://${{ secrets.AWS_S3_BUCKET }}/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID }} --paths "/Use *"

